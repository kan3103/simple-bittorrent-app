# Form implementation generated from reading ui file 'download.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
from PyQt6 import QtCore, QtGui, QtWidgets 
import socket
import bencodepy
import request
import requests
import files
import create_torrent
sys.path.append(os.path.join(os.path.dirname(__file__), '..','core'))
from api import Client
import time
class DownloadThread(QtCore.QThread):

    def __init__(self, id ,infofile, torrent, progress, status, parent=None):
        super().__init__(parent)
        self.is_running = True  
        self.is_paused = False  
        self.mutex = QtCore.QMutex()  
        self.condition = QtCore.QWaitCondition() 
        self.progress = progress
        self.status = status
        self.torrent = torrent
        self.infofile = infofile
        self.id = id

    def run(self):
        while self.is_running:
            self.mutex.lock()
            if self.is_paused:
                self.condition.wait(self.mutex)
            self.mutex.unlock()

            if sum(file['downloaded'] for file in self.torrent.files_info) >= sum(file['length'] for file in self.torrent.files_info):
                for index,file in enumerate(self.torrent.files_info):
                    if file['downloaded'] == file['length']:
                        self.infofile.update(self.id, index , "done")  
                self.progress.setValue(int(sum([file['downloaded'] for file in self.torrent.files_info])/sum([file['length'] for file in self.torrent.files_info])*100))
                self.status.setText("Done")
                break

            for index,file in enumerate(self.torrent.files_info):
                if file['downloaded'] == file['length']:
                    self.infofile.update(self.id, index , "done")
            self.progress.setValue(int(sum([file['downloaded'] for file in self.torrent.files_info])/sum([file['length'] for file in self.torrent.files_info])*100))
            QtCore.QThread.sleep(1)

        
        

    def gettorrent(self):
        return self.torrent
    
    
    def pause(self):
        """Tạm dừng luồng."""
        self.mutex.lock()
        self.is_paused = True
        self.mutex.unlock()

    def resume(self):
        """Tiếp tục luồng."""
        self.mutex.lock()
        self.is_paused = False
        self.condition.wakeAll()
        self.mutex.unlock()

    def stop(self):
        """Dừng hẳn luồng."""
        print("Stop download")
        self.is_running = False
        self.resume()  
class TableTorrrent(QtWidgets.QTableWidget):
    def __init__(self, parent=None,bool=False):
        super(TableTorrrent, self).__init__(parent)
        if bool:
            self.setColumnCount(7)
            self.setHorizontalHeaderLabels(["ID","Choose","Name", "Size", "Done", "Status", "Peers"])
            self.setColumnWidth(1, 50)
            self.setColumnWidth(2, 107)
            self.setColumnWidth(3, 90)
            self.setColumnWidth(4, 200)
            self.setColumnWidth(5, 90)
            self.setColumnWidth(6, 90)
            self.setColumnWidth(0, 70)
        else:
            self.setColumnCount(3)
            self.setHorizontalHeaderLabels(["Name","Size", "Status"])
            self.setColumnWidth(0, 150)
            self.setColumnWidth(1, 107)
            self.setColumnWidth(2, 90)
   
    def add_row_to_table(self, filename, size, status, progress,id):
        row_position = self.rowCount()
        self.insertRow(row_position)

        item_id = QtWidgets.QTableWidgetItem("TRT" + str(id))
        item_filename = QtWidgets.QTableWidgetItem(filename)
        item_size = QtWidgets.QTableWidgetItem(size)
        item_status = QtWidgets.QTableWidgetItem(status)

        item_id.setFlags(item_id.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        item_filename.setFlags(item_filename.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        item_size.setFlags(item_size.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        item_status.setFlags(item_status.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)

        
        self.setItem(row_position, 0, item_id)
        self.setItem(row_position, 2, item_filename)
        self.setItem(row_position, 3, item_size)
        self.setItem(row_position, 5, item_status)

        progress_widget = QtWidgets.QProgressBar()
        progress_widget.setValue(progress)
        self.setCellWidget(row_position, 4, progress_widget)
        
        checkBox = QtWidgets.QCheckBox()
        checkBox.setObjectName(f"checkbox_{id}")
        self.setCellWidget(row_position, 1, checkBox)
        return progress_widget,item_status
    
    def add_file_to_table(self, filename, size, status):
        row_position = self.rowCount()
        self.insertRow(row_position)

        item_filename = QtWidgets.QTableWidgetItem(filename)
        item_size = QtWidgets.QTableWidgetItem(str(size))
        item_status = QtWidgets.QTableWidgetItem(status)

        item_filename.setFlags(item_filename.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        item_size.setFlags(item_size.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
        item_status.setFlags(item_status.flags() & ~QtCore.Qt.ItemFlag.ItemIsEditable)
    
        self.setItem(row_position, 0, item_filename)
        self.setItem(row_position, 1, item_size)
        self.setItem(row_position, 2, item_status)
        

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        
        self.download_threads = {}
        
        self.client = Client()
        
        self.client.run_server()
        
        self.id = 1
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.textfile = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.textfile.setGeometry(QtCore.QRect(400, 40, 256, 21))
        self.textfile.setObjectName("textfile")

        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.clicked.connect(self.open_file_dialog)
        self.pushButton.setGeometry(QtCore.QRect(670, 40, 100, 21))
        self.pushButton.setObjectName("pushButton")
        
        
        self.tableWidget = TableTorrrent(parent=self.centralwidget,bool=True)
        self.tableWidget.setGeometry(QtCore.QRect(50, 120, 721, 192))
        
        self.tableWidget.cellClicked.connect(self.cell_clicked)
        
        self.infofile = files.Torrent_file()
        
        
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 40, 47, 21))
        self.label.setObjectName("label")
        
        self.textBrowser_2 = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(100, 40, 151, 21))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(260, 40, 47, 21))
        self.label_2.setObjectName("label_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.textBrowser_3.setGeometry(QtCore.QRect(290, 40, 91, 21))
        self.textBrowser_3.setObjectName("textBrowser_3")
        
        
        self.tableFile = TableTorrrent(parent=self.centralwidget,bool=False)
        self.tableFile.setGeometry(QtCore.QRect(50, 340, 721, 192))
        
        self.labelurl = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelurl.setGeometry(QtCore.QRect(500, 350, 72, 21))
        self.labelurl.setObjectName("labelurl")
        self.labelurl.setText("URL: ")
        self.urltext = QtWidgets.QTextBrowser(parent=self.centralwidget)
        self.urltext.setGeometry(QtCore.QRect(550, 350, 150, 21))
       
        self.runbutton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.runbutton.setGeometry(QtCore.QRect(50, 90, 75, 23))
        self.runbutton.setObjectName("runbutton")
        self.runbutton.clicked.connect(self.run_selected_downloads)
        

        
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(610, 90, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.pause_selected_downloads)
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(690, 90, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.cancle_selected_downloads)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionCreate_torrent = QtGui.QAction(parent=MainWindow)
        self.actionCreate_torrent.setObjectName("actionCreate_torrent")
        self.actionClose = QtGui.QAction(parent=MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.menuFile.addAction(self.actionCreate_torrent)
        self.menuFile.addAction(self.actionClose)
        self.menubar.addAction(self.menuFile.menuAction())
        self.actionCreate_torrent.triggered.connect(self.show_create_torrent_dialog)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
    def show_create_torrent_dialog(self):
        dialog = create_torrent.CreateTorrentDialog(self.client,self.centralwidget)
        
        if dialog.exec() == QtWidgets.QDialog.DialogCode.Accepted:
            print("Selected files:", dialog.selected_files)
            
            torrent = dialog.torrent
            size_in_bytes = self.infofile.add("TRT" + str(self.id), torrent.torrent_data,"uploading") 
            size_in_mb = size_in_bytes / (1024 * 1024)  

            progress, status = self.tableWidget.add_row_to_table(
                torrent.name, 
                f"{size_in_mb:.2f} MB",  
                "Uploading", 
                100, 
                id=self.id
            )
            self.download_thread = DownloadThread("TRT" + str(self.id),self.infofile,torrent,progress,status)
            # self.download_thread.start()
            # self.client.download(torrent.info_hash)
            self.download_threads["TRT" + str(self.id)] = self.download_thread
            self.id += 1
        
    def update_progress(self,value,progress):
        progress.setValue(value)

    def pause_selected_downloads(self):
        for row in range(self.tableWidget.rowCount()):
            checkbox = self.tableWidget.cellWidget(row, 1)
            if checkbox and checkbox.isChecked():
                id = self.tableWidget.item(row, 0).text()
                if id in self.download_threads:
                    torrent = self.download_threads[id].gettorrent()
                    self.download_threads[id].pause()
                    self.client.stop(torrent.info_hash)
                    self.tableWidget.item(row, 5).setText("Paused")

                    
    def run_selected_downloads(self):
        for row in range(self.tableWidget.rowCount()):
            checkbox = self.tableWidget.cellWidget(row, 1)
            if checkbox and checkbox.isChecked():
                id = self.tableWidget.item(row, 0).text()
                if id in self.download_threads:
                    torrent = self.download_threads[id].gettorrent()
                    self.client.resume(torrent.info_hash)
                    self.download_threads[id].resume()
                    self.tableWidget.item(row, 5).setText("Downloading")

                    
    def cancle_selected_downloads(self):
        rows_to_remove = []  
        for row in range(self.tableWidget.rowCount()):
            checkbox = self.tableWidget.cellWidget(row, 1)
            if checkbox and checkbox.isChecked():
                id = self.tableWidget.item(row, 0).text()
                if id in self.download_threads:
                    torrent = self.download_threads[id].gettorrent()
                    self.client.remove(torrent.info_hash) 
                    self.download_threads[id].stop() 
                    del self.download_threads[id]  
                    rows_to_remove.append(row)  
                    self.infofile.delete(id)
                    self.tableFile.setRowCount(0)
                    self.urltext.setText("")
    
        
        for row in sorted(rows_to_remove, reverse=True):
            self.tableWidget.removeRow(row)


    def cell_clicked(self, row, column):
        widget = self.tableWidget.cellWidget(row, column)
        id = self.tableWidget.item(row, 0).text()
        tablefile = self.infofile.get(id)
        self.urltext.setText(tablefile["tracker_url"])
        self.tableFile.setRowCount(0)
        for file in tablefile["files"]:
            self.tableFile.add_file_to_table(file['name'], file['size'], file['status'])
        if widget:
            if isinstance(widget, QtWidgets.QCheckBox):
                print(f"Checkbox clicked, isChecked: {widget.isChecked()}")
            elif isinstance(widget, QtWidgets.QProgressBar):
                print(f"ProgressBar clicked, value: {widget.value()}")
        else:
            item = self.tableWidget.item(row, column)
            if item:
                print(f"Cell text: {item.text()}")
                
    def open_file_dialog(self):
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Choose a file to upload", "", "All Files (*.*)")
        if file_path:
            self.textfile.setText(file_path)
            torrent =self.client.add_torrent(file_path)
            
            # Đọc file .torrent
            try:
                with open(file_path, 'rb') as f:
                    torrent_data = bencodepy.decode(f.read())
            except Exception as e:
                print(f"Plese choose a torrent file")
                return
            
            try:    
                file_name = os.path.basename(file_path)
                     
                size_in_bytes = self.infofile.add("TRT" + str(self.id), torrent_data,"downloading") 
                size_in_mb = size_in_bytes / (1024 * 1024)  

                progress, status = self.tableWidget.add_row_to_table(
                    file_name, 
                    f"{size_in_mb:.2f} MB",  
                    "Downloading", 
                    0, 
                    id=self.id
                )
                self.download_thread = DownloadThread("TRT" + str(self.id),self.infofile,torrent,progress,status)
                self.download_thread.start()
                self.client.download(torrent.info_hash)
                self.download_threads["TRT" + str(self.id)] = self.download_thread
                self.id += 1
                
            except Exception as e:
                print(f"Error: {e}")

    def get_local_ip(self):
        try:
            hostname = "8.8.8.8"  
            port = 80
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                s.connect((hostname, port))
                self.local_ip = s.getsockname()[0]
            self.textBrowser_2.setText(self.local_ip)
        except Exception as e:
            print(f"Error: {e}")
            
    
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Dowload torrent"))
        self.label.setText(_translate("MainWindow", "Your IP"))
        self.label_2.setText(_translate("MainWindow", "Port"))
        self.pushButton_3.setText(_translate("MainWindow", "Pause"))
        self.pushButton_4.setText(_translate("MainWindow", "Cancel"))
        self.runbutton.setText(_translate("MainWindow", "Run"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionCreate_torrent.setText(_translate("MainWindow", "Create torrent"))
        self.actionClose.setText(_translate("MainWindow", "Close"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.get_local_ip()
    MainWindow.show()
    sys.exit(app.exec())
